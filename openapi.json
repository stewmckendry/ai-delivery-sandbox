{
  "openapi": "3.1.0",
  "info": {
    "title": "GovDoc Copilot: PM Edition",
    "version": "1.0.0",
    "description": "Your AI copilot for preparing government project gate submissions. Guides PMs through drafting, reviewing, and finalizing project documentation."
  },
  "servers": [
    {
      "url": "https://robust-adventure-production.up.railway.app",
      "description": "Production server"
    }
  ],
  "security": [
    { "bearerAuth": [] }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {}  
  },
  "paths": { 
    "/tools": {
      "get": {
        "operationId": "listGPTFacingTools",
        "summary": "List available tools for GPT use",
        "tags": ["Tool Discovery"],
        "x-gpt-action": {
          "name": "List Available Tools",
          "instructions": "Call this to get a list of tools that are available for use in this assistant. Only tools marked as GPT-facing will be returned.",
          "summary_keywords": ["list", "tools", "catalog", "discovery"]
        },
        "responses": {
          "200": {
            "description": "Returns an array of tool metadata including tool_id, description, and schema if applicable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tool_id": { "type": "string", "example": "getArtifactRequirements" },
                      "description": { "type": "string", "example": "Retrieve required sections and criteria for an artifact" },
                      "schema": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/getArtifactRequirements": {
      "post": {
        "operationId": "getArtifactRequirements",
        "summary": "Retrieve artifact options and requirements for a gate",
        "tags": ["Input Prep"],
        "x-gpt-action": {
          "name": "Get Artifact Requirements",
          "instructions": "Use this to start a new artifact workflow. Optionally pass `gate_id` and `project_id`. If `gate_id` is omitted, a full artifact map will be returned. Use this to help users choose a gate. `session_id` will be returned for use in all follow-on tools.",
          "summary_keywords": ["artifact", "requirements", "workflow"]
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gate_id": {
                    "type": "integer",
                    "description": "Optional: Which gate the user is preparing for."
                  },
                  "project_id": {
                    "type": "string",
                    "description": "Optional: User-defined label for the current project."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns session_id and either gate-specific or full artifact requirements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session_id": {
                      "type": "string",
                      "description": "Newly generated session ID for this drafting session"
                    },
                    "instructions": {
                      "type": "string"
                    },
                    "artifacts": {
                      "type": "array",
                      "description": "Artifact list for specified gate (if gate_id was passed)"
                    },
                    "artifacts_by_gate": {
                      "type": "array",
                      "description": "Full list of gates and their artifacts (if gate_id omitted)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/uploadReferenceDocument": {
      "post": {
        "operationId": "uploadReferenceDocument",
        "summary": "Embed and index external policy or strategy documents for use in generation",
        "tags": ["Input Prep"],
        "x-gpt-action": {
          "name": "Upload Reference Corpus",
          "instructions": "Use this when the user uploads foundational docs (e.g. policies, strategies, standards) that need to be embedded and available for alignment.\nFields:\n- `file_contents`: full text of the document\n- `file_name`: string (e.g. 'Digital Standards 2024')\n- `metadata`: object with `title`, `source`, `date` (ISO format)",
          "summary_keywords": ["corpus", "embed", "reference", "index"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_contents": {
                    "type": "string",
                    "description": "Raw document text. Required if file_url is not provided.",
                    "example": "Digital services must be accessible and user-centered..."
                  },
                  "file_name": {
                    "type": "string",
                    "description": "Name of the file (optional if file_url is provided)",
                    "example": "digital_standards_2024.txt"
                  },
                  "file_url": {
                    "type": "string",
                    "description": "URL to the file (optional if file_contents is provided)",
                    "example": "https://example.com/digital_standards_2024.txt"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "example": "Digital Standards 2024" },
                      "source": { "type": "string", "example": "Treasury Board Secretariat" },
                      "date": { "type": "string", "format": "date", "example": "2024-01-15" }
                    },
                    "required": ["title", "source", "date"]
                  }
                },
                "required": ["metadata"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded and processed (synchronously or asynchronously).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Processing status â€” 'accepted' for async, 'success' for sync"
                    },
                    "job_id": {
                      "type": "string",
                      "description": "Only present if background processing was used"
                    },
                    "chunks": {
                      "type": "integer",
                      "description": "Number of chunks created from the uploaded document (sync only)"
                    },
                    "instructions": {
                      "type": "string",
                      "description": "Guidance to GPT on what to do next"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/listReferenceDocuments": {
      "post": {
        "operationId": "listReferenceDocuments",
        "summary": "List indexed reference documents",
        "tags": ["Reference"],
        "x-gpt-action": {
          "name": "List Reference Documents",
          "instructions": "Use this to check what documents have already been uploaded to avoid duplication. It returns a list of document metadata from the reference corpus.",
          "summary_keywords": ["list", "reference", "documents"]
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of reference documents in the vector database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "documents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string" },
                          "source": { "type": "string" },
                          "date": { "type": "string" },
                          "url": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/alignWithReferenceDocuments": {
      "post": {
        "operationId": "alignWithReferenceDocuments",
        "summary": "Query the reference document corpus for relevant matches and summary answer",
        "tags": ["Refeence Documents"],
        "x-gpt-action": {
          "name": "Align with Reference Documents",
          "instructions": "Use this to query previously uploaded or embedded reference documents for relevant information. Pass a `query` string. Optionally include session_id and user_id for logging.",
          "summary_keywords": ["query", "reference", "summarize"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "User's question or topic of interest",
                    "example": "What are the Government of Canada's priorities for AI regulation?"
                  },
                  "session_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "filter_titles": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Optional list of document titles to constrain the semantic search"
                  }

                },
                "required": ["query"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer and citations from matching reference documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "answer": {
                      "type": "string",
                      "description": "Summarized answer generated from the relevant documents"
                    },
                    "documents": {
                      "type": "array",
                      "description": "List of raw text content from matching documents",
                      "items": {
                        "type": "string"
                      }
                    },
                    "citations": {
                      "type": "array",
                      "description": "Formatted citations for each matching document",
                      "items": {
                        "type": "string"
                      }
                    },
                    "metadatas": {
                      "type": "array",
                      "description": "Metadata for each matching document",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": { "type": "string", "description": "Raw document text" },
                          "title": { "type": "string", "description": "Title of the document" },
                          "source": { "type": "string", "description": "Source or publication origin" },
                          "date": { "type": "string", "description": "Date of publication or indexing" },
                          "url": { "type": "string", "description": "URL to the source document if available" },
                          "citation": { "type": "string", "description": "Formatted citation text" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/record_research": {
      "post": {
        "operationId": "recordResearchNotes",
        "summary": "Record structured research notes for reuse",
        "tags": ["Research"],
        "x-gpt-action": {
          "name": "Record Research Notes",
          "instructions": "Use this tool to store user-provided research notes for later reuse. You must include:\n- `session_id`: identifies the session context\n- `project_id`: project this research supports\n- `notes`: the research content (can be GPT-summarized from a discussion)\nYou may include structured metadata fields if available.",
          "summary_keywords": ["research", "record", "global context"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": { "type": "string" },
                  "project_id": { "type": "string" },
                  "user_id": { "type": "string" },
                  "notes": { "type": "string", "description": "Free-form research notes" },
                  "metadatas": {
                    "type": "array",
                    "description": "Optional structured metadata",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": { "type": "string" },
                        "title": { "type": "string" },
                        "source": { "type": "string" },
                        "date": { "type": "string" },
                        "url": { "type": "string" },
                        "citation": { "type": "string" }
                      }
                    }
                  }
                },
                "required": ["session_id", "project_id", "notes"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Research successfully recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message summarizing what happened",
                      "example": "âœ… Research note saved and indexed for reuse during drafting. You can now continue drafting sections, record additional notes, or upload more reference materials."
                    },
                    "citations": {
                      "type": "array",
                      "description": "List of formatted citations extracted or created from the notes",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "\"AI and Public Trust.\" Treasury Board Secretariat, 2024-03-01.",
                        "\"Ethics of Automation.\" Government of Canada, 2023-11-15."
                      ]
                    },
                    "summary_excerpt": {
                      "type": "string",
                      "description": "Excerpt of the recorded notes for preview",
                      "example": "AI adoption in public services requires a balance between innovation and ethical safeguards..."
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          }
        }
      }
    },
    "/tools/uploadProjectInputs": {
      "post": {
        "operationId": "uploadProjectInputs",
        "summary": "Upload and summarize a project input for drafting",
        "tags": ["Input Prep"],
        "x-gpt-action": {
          "name": "Upload Project Input",
          "instructions": "Call this when the user provides notes, links, or documents. Returns a short summary and instructions for what to do next.",
          "summary_keywords": ["input", "upload", "summary", "project"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input_method": {
                    "type": "string",
                    "enum": ["text", "file", "link"],
                    "description": "Which type of input is being uploaded: 'text', 'file', or 'link'."
                  },
                  "text": {
                    "type": "string",
                    "description": "The full body of plain text to ingest (used only if input_method is 'text')."
                  },
                  "file_path": {
                    "type": "string",
                    "description": "Relative path where the uploaded file will be stored (required if input_method is 'file')."
                  },
                  "file_content": {
                    "type": "string",
                    "description": "The raw contents of the uploaded file (required if input_method is 'file')."
                  },
                  "url": {
                    "type": "string",
                    "description": "A valid URL to scrape and ingest content from (used only if input_method is 'link')."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "gate_id": { "type": "integer" },
                      "artifact_id": { "type": "string" },
                      "section_id": { "type": "string" },
                      "intent": { "type": "string" },
                      "session_id": { "type": "string" },
                      "user_id": { "type": "string" },
                      "project_id": { "type": "string" }
                    },
                    "required": ["artifact_id", "project_id"]
                  }
                },
                "required": ["input_method", "metadata"],
                "oneOf": [
                  { "required": ["text"] },
                  { "required": ["file_path", "file_content"] },
                  { "required": ["url"] }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns summary of input and GPT instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "summary": { "type": "string" },
                    "instructions": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/reviewInputSnapshot": {
      "post": {
        "operationId": "reviewInputSnapshot",
        "summary": "Summarize session inputs into a structured review snapshot",
        "tags": ["Input Review"],
        "x-gpt-action": {
          "name": "Review Session Inputs",
          "instructions": "Use this tool to review what inputs (files, notes, links) have been uploaded during a session. Pass `session_id` and `project_id`.",
          "summary_keywords": ["input summary", "session snapshot", "review uploaded inputs"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": {
                    "type": "string"
                  },
                  "project_id": {
                    "type": "string"
                  }
                },
                "required": ["session_id", "project_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Structured summary of session inputs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "input_snapshot": {
                      "type": "string",
                      "description": "LLM-rendered summary of inputs"
                    },
                    "instructions": {
                      "type": "string",
                      "description": "How to use the snapshot for drafting or review"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/generateSectionDraft": {
      "post": {
        "operationId": "generateSectionDraft",
        "summary": "Generate a draft for a specific artifact section",
        "tags": ["Drafting"],
        "x-gpt-action": {
          "name": "Generate Section Draft",
          "instructions": "Use this to draft a section from the artifact using previously uploaded inputs, memory, and context. Run this for each section.",
          "summary_keywords": ["draft", "section", "generate"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "artifact_id": {
                    "type": "string",
                    "description": "ID of the artifact the section belongs to"
                  },
                  "section_id": {
                    "type": "string",
                    "description": "ID of the section to generate"
                  },
                  "gate_id": {
                    "type": "string"
                  },
                  "session_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "project_id": {
                    "type": "string"
                  }
                },
                "required": ["artifact_id", "section_id", "session_id", "project_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the draft text and next-step instructions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "draft": { "type": "string" },
                    "instructions": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/section_review_feedback": {
      "post": {
        "operationId": "section_review_feedback",
        "summary": "Revise a section based on feedback",
        "tags": ["Drafting"],
        "x-gpt-action": {
          "name": "Revise Section",
          "instructions": "Use this when a user provides feedback on a drafted section and wants changes made. You must include:\n- `section_id`, `artifact_id`, `project_id`, and `session_id`\n- `feedback`: natural language description of what to change\n- Optional: `revision_type` like 'rewrite', 'add', 'remove'",
          "summary_keywords": ["revise", "section", "feedback"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "section_id": { "type": "string" },
                  "artifact_id": { "type": "string" },
                  "project_id": { "type": "string" },
                  "session_id": { "type": "string" },
                  "feedback": { "type": "string" },
                  "revision_type": {
                    "type": "string",
                    "enum": ["rewrite", "add", "remove"]
                  }
                },
                "required": ["section_id", "artifact_id", "feedback", "project_id", "session_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the revised section and summary of changes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": { "type": "string" },
                    "section_id": { "type": "string" },
                    "diff_summary": { "type": "string" },
                    "instructions": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}