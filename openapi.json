{
  "openapi": "3.1.0",
  "info": {
    "title": "GovDoc Copilot: PM Edition",
    "version": "1.0.0",
    "description": "Your AI copilot for preparing government project gate submissions. Guides PMs through drafting, reviewing, and finalizing project documentation."
  },
  "servers": [
    {
      "url": "https://robust-adventure-production.up.railway.app",
      "description": "Production server"
    }
  ],
  "security": [
    { "bearerAuth": [] }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {}  
  },
  "paths": { 
    "/tools": {
      "get": {
        "operationId": "listGPTFacingTools",
        "summary": "List available tools for GPT use",
        "tags": ["Tool Discovery"],
        "x-gpt-action": {
          "name": "List Available Tools",
          "instructions": "Call this to get a list of tools that are available for use in this assistant. Only tools marked as GPT-facing will be returned.",
          "summary_keywords": ["list", "tools", "catalog", "discovery"]
        },
        "responses": {
          "200": {
            "description": "Returns an array of tool metadata including tool_id, description, and schema if applicable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tool_id": { "type": "string", "example": "getArtifactRequirements" },
                      "description": { "type": "string", "example": "Retrieve required sections and criteria for an artifact" },
                      "schema": { "type": "object" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/getArtifactRequirements": {
      "post": {
        "operationId": "getArtifactRequirements",
        "summary": "Retrieve artifact options and requirements for a gate",
        "tags": ["Input Prep"],
        "x-gpt-action": {
          "name": "Get Artifact Requirements",
          "instructions": "Use this when a user is starting a new artifact. Ask which gate they are preparing for (0–5). Pass:\n- `gate_id`: integer (see values below)\n\nThis returns:\n- A user-facing instruction message\n- A list of available artifacts for that gate, including section structure and evaluation criteria.\n\nYou should:\n1. Present the list of artifacts to the user\n2. Ask them to pick one\n3. Use the section metadata to guide the drafting process",
          "summary_keywords": ["prompt", "generate", "section guidance"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gate_id": {
                    "type": "integer",
                    "enum": [0, 1, 2, 3, 4, 5],
                    "description": "Which gate the user is preparing for.\n- 0: Gate 0 – Verify Business Problem or Opportunity (Pre-Project)\n- 1: Gate 1 – Validate Business Justification and Select Short List of Options\n- 2: Gate 2 – Approve Preferred Option and Approach\n- 3: Gate 3 – Fund Project Deliverables (Project Approval)\n- 4: Gate 4 – Confirm Readiness for Service (Pre-Implementation)\n- 5: Gate 5 – Complete Project and Post-Implementation Review (Close-Out)",
                    "example": 3
                  }
                },
                "required": ["gate_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an instruction message and list of artifacts with section guidance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instructions": {
                      "type": "string",
                      "description": "Message for GPT on how to use the returned data"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Each item is a section intent with metadata"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/uploadReferenceDocument": {
      "post": {
        "operationId": "uploadReferenceDocument",
        "summary": "Embed and index external policy or strategy documents for use in generation",
        "tags": ["Input Prep"],
        "x-gpt-action": {
          "name": "Upload Reference Corpus",
          "instructions": "Use this when the user uploads foundational docs (e.g. policies, strategies, standards) that need to be embedded and available for alignment.\nFields:\n- `file_contents`: full text of the document\n- `file_name`: string (e.g. 'Digital Standards 2024')\n- `metadata`: object with `title`, `source`, `date` (ISO format)",
          "summary_keywords": ["corpus", "embed", "reference", "index"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_contents": {
                    "type": "string",
                    "description": "Raw document text. Required if file_url is not provided.",
                    "example": "Digital services must be accessible and user-centered..."
                  },
                  "file_name": {
                    "type": "string",
                    "description": "Name of the file (optional if file_url is provided)",
                    "example": "digital_standards_2024.txt"
                  },
                  "file_url": {
                    "type": "string",
                    "description": "URL to the file (optional if file_contents is provided)",
                    "example": "https://example.com/digital_standards_2024.txt"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "title": { "type": "string", "example": "Digital Standards 2024" },
                      "source": { "type": "string", "example": "Treasury Board Secretariat" },
                      "date": { "type": "string", "format": "date", "example": "2024-01-15" }
                    },
                    "required": ["title", "source", "date"]
                  }
                },
                "required": ["metadata"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded and processed (synchronously or asynchronously).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Processing status — 'accepted' for async, 'success' for sync"
                    },
                    "job_id": {
                      "type": "string",
                      "description": "Only present if background processing was used"
                    },
                    "chunks": {
                      "type": "integer",
                      "description": "Number of chunks created from the uploaded document (sync only)"
                    },
                    "instructions": {
                      "type": "string",
                      "description": "Guidance to GPT on what to do next"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/listReferenceDocuments": {
      "post": {
        "operationId": "listReferenceDocuments",
        "summary": "List indexed reference documents",
        "tags": ["Reference"],
        "x-gpt-action": {
          "name": "List Reference Documents",
          "instructions": "Use this to check what documents have already been uploaded to avoid duplication. It returns a list of document metadata from the reference corpus.",
          "summary_keywords": ["list", "reference", "documents"]
        },
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of reference documents in the vector database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "documents": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "title": { "type": "string" },
                          "source": { "type": "string" },
                          "date": { "type": "string" },
                          "url": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/alignWithReferenceDocuments": {
      "post": {
        "operationId": "alignWithReferenceDocuments",
        "summary": "Query the reference document corpus for relevant matches and summary answer",
        "tags": ["Refeence Documents"],
        "x-gpt-action": {
          "name": "Align with Reference Documents",
          "instructions": "Use this to query previously uploaded or embedded reference documents for relevant information. Pass a `query` string. Optionally include session_id and user_id for logging.",
          "summary_keywords": ["query", "reference", "summarize"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "User's question or topic of interest",
                    "example": "What are the Government of Canada's priorities for AI regulation?"
                  },
                  "session_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "filter_titles": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Optional list of document titles to constrain the semantic search"
                  }

                },
                "required": ["query"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer and citations from matching reference documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "answer": {
                      "type": "string",
                      "description": "Summarized answer generated from the relevant documents"
                    },
                    "documents": {
                      "type": "array",
                      "description": "List of raw text content from matching documents",
                      "items": {
                        "type": "string"
                      }
                    },
                    "citations": {
                      "type": "array",
                      "description": "Formatted citations for each matching document",
                      "items": {
                        "type": "string"
                      }
                    },
                    "metadatas": {
                      "type": "array",
                      "description": "Metadata for each matching document",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": { "type": "string", "description": "Raw document text" },
                          "title": { "type": "string", "description": "Title of the document" },
                          "source": { "type": "string", "description": "Source or publication origin" },
                          "date": { "type": "string", "description": "Date of publication or indexing" },
                          "url": { "type": "string", "description": "URL to the source document if available" },
                          "citation": { "type": "string", "description": "Formatted citation text" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/record_research": {
      "post": {
        "operationId": "recordResearchNotes",
        "summary": "Record structured research notes for reuse",
        "tags": ["Research"],
        "x-gpt-action": {
          "name": "Record Research Notes",
          "instructions": "Use this tool to store user-provided research notes for later reuse. You must include:\n- `session_id`: identifies the session context\n- `project_id`: project this research supports\n- `notes`: the research content (can be GPT-summarized from a discussion)\nYou may include structured metadata fields if available.",
          "summary_keywords": ["research", "record", "global context"]
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": { "type": "string" },
                  "project_id": { "type": "string" },
                  "user_id": { "type": "string" },
                  "notes": { "type": "string", "description": "Free-form research notes" },
                  "metadatas": {
                    "type": "array",
                    "description": "Optional structured metadata",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": { "type": "string" },
                        "title": { "type": "string" },
                        "source": { "type": "string" },
                        "date": { "type": "string" },
                        "url": { "type": "string" },
                        "citation": { "type": "string" }
                      }
                    }
                  }
                },
                "required": ["session_id", "project_id", "notes"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Research successfully recorded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message summarizing what happened",
                      "example": "✅ Research note saved and indexed for reuse during drafting. You can now continue drafting sections, record additional notes, or upload more reference materials."
                    },
                    "citations": {
                      "type": "array",
                      "description": "List of formatted citations extracted or created from the notes",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "\"AI and Public Trust.\" Treasury Board Secretariat, 2024-03-01.",
                        "\"Ethics of Automation.\" Government of Canada, 2023-11-15."
                      ]
                    },
                    "summary_excerpt": {
                      "type": "string",
                      "description": "Excerpt of the recorded notes for preview",
                      "example": "AI adoption in public services requires a balance between innovation and ethical safeguards..."
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          }
        }
      }
    }
  }
}