- message: "Initiated Feature Area 6 task. YAMLs will be loaded from Git repo directly\
    \ from reference folder. Will use Pydantic for schema enforcement.\n\nFor validation:\n\
    - At runtime, each tool call will validate YAML structure and field presence (for\
    \ resilience).\n- At deploy time (CI), we\u2019ll run a validator script to check\
    \ full schema conformance and changelog presence.\n\nPlanning to separate logic\
    \ by engine:\n- triage_engine.py \u2192 triage flow + risk flags\n- stage_engine.py\
    \ \u2192 stage guidance\n\nThese engines will be invoked by tools like get_triage_flow\
    \ and get_stage_guidance."
  timestamp: '2025-05-09T12:44:24.787023'
  tags:
  - initial-plan
  - engine-architecture
  - yaml-validation
- message: 'Finalized the design spec after several key clarifications:

    - Updated pydantic schemas based on real structure of triage_map.yaml and stages.yaml

    - Clarified difference between get_triage_flow and get_triage_question, and when
    assess_concussion is invoked

    - Detailed user journey per engine, mapping upstream/downstream usage

    - Confirmed engines are read-only logic, but their outputs are logged by tools
    to SQLite/Azure SQL per system architecture

    - Schema validator will not relocate YAMLs but validate in-place using models
    in app/models/


    Next step is to begin building triage_engine.py using these inputs.'
  timestamp: '2025-05-09T14:03:17.818027'
  tags:
  - design-complete
  - schema-alignment
  - user-flow-clarity
- message: 'Committed TriageEngine implementation with GitHub YAML loading.

    - Created task checklist to track each feature deliverable step

    - Added schema_notes.md to explain what triage_map, tracker_state, and stage_map
    are for, their schema structure, and who uses them

    - This setup ensures we are working front-to-back and not missing any parts of
    the engine pipeline'
  timestamp: '2025-05-09T17:02:05.694965'
  tags:
  - triage_engine
  - schema_notes
  - task_tracking
- message: Defined triage schema models in app/models/triage.py with full attribute-level
    comments. This provides the type safety and validation backbone for triage_engine
    and future tools that read triage_map.yaml. Confirmed these align 1:1 with the
    YAML structure, and updated task list to reflect this milestone.
  timestamp: '2025-05-09T17:11:26.829398'
  tags:
  - triage_schema
  - engine_alignment
  - task_tracking
- message: 'Added TrackerState schema in app/models/tracker.py with embedded clarification:
    question IDs in `answers` must align with those defined in triage_map.yaml. This
    reinforces contract between input state and YAML-defined logic and ensures triage_engine
    can traverse or evaluate correctly.'
  timestamp: '2025-05-09T17:20:18.008764'
  tags:
  - tracker_schema
  - triage_alignment
  - input_contract
- message: Added pytest-based unit tests for triage_engine covering loading, next-question
    selection, and red flag detection. This ensures schema validity and logic correctness
    for triage flows. Tests will be useful both during local development and when
    integrated into CI validation runs.
  timestamp: '2025-05-09T17:25:00.870670'
  tags:
  - unit-tests
  - triage_engine
  - test_coverage
- message: Aligned stage_engine.py with actual stages.yaml schema by switching to
    `duration_min_hours` and `symptom_severity_max`. Added static cutoff mapping in
    engine. Also committed new schema addendum file documenting stage_criteria_logic
    and how it's used to match recovery stage logic.
  timestamp: '2025-05-09T17:34:35.012642'
  tags:
  - stage_engine
  - schema_alignment
  - schema_docs
- message: "Committed stage schema models based on stages.yaml structure. These include\
    \ both the input logic (StageCriteriaLogic) and output summary (StageResult).\
    \ Added detailed comments per attribute to improve readability and tool integration.\
    \ We now need to address how symptom severity scoring will be implemented to support\
    \ 'symptom_severity_max' logic \u2014 this may be handled in Feature Area 2 where\
    \ symptoms are logged and scored."
  timestamp: '2025-05-09T17:38:48.833368'
  tags:
  - stage_schema
  - severity_logic
  - symptoms_dependency
- message: Finalized schema_validator.py with CLI support to validate triage and stage
    YAML files using pydantic models. Supports both --all and --schema/file modes.
    This tool can be wired into CI or used manually to prevent schema drift.
  timestamp: '2025-05-09T17:44:03.533210'
  tags:
  - schema_validator
  - cli_tool
  - validation
