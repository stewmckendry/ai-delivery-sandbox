from typing import Dict
from pydantic import BaseModel
from jinja2 import Template
import requests
from app.utils.generate_artifact_template import generate_template_for_artifact

class InputSchema(BaseModel):
    section_id: str
    section_text: str
    template_url: str  # GitHub raw URL to template (to be generated by toolchain pre-processor)
    artifact_id: str

class OutputSchema(BaseModel):
    formatted_section: str

class Tool:
    def validate(self, input_dict: Dict) -> InputSchema:
        return InputSchema(**input_dict)

    def run_tool(self, input_dict: Dict) -> Dict:
        data = self.validate(input_dict)
        template_text = None

        response = requests.get(data.template_url)
        if response.status_code == 200:
            template_text = response.text
        else:
            template_text = generate_template_for_artifact(data.artifact_id)
            if not template_text:
                raise FileNotFoundError(f"No static or dynamic template found for artifact {data.artifact_id}")

        template = Template(template_text)
        output = template.render(text=data.section_text, section_id=data.section_id)
        return OutputSchema(formatted_section=output).dict()