- type: bug
  scope: project
  issue_id: f0531a96-1507-49ea-8c43-9d355d290397
  task_id: null
  title: Batch 4 commits partially failed without clear error
  detail: During commit of Batch 4 (fetch_summary feature), the initial commit call
    succeeded only for memory.py, while the remaining files (schemas/summary.py, utils/memory_manager.py,
    clients/airtable_client.py) were not committed despite no explicit error being
    returned. Required manual re-commits. Possibly due to context overrun or file
    buffer handling during bulk updates.
  suggested_fix: Verify commit payload size limits or logging around batch commits
    to ensure atomicity or return more descriptive error messaging.
  tags:
  - commit
  - bug
  - batch
  - file-sync
  status: open
  timestamp: '2025-05-04T02:36:37.097707'
- type: enhancement
  scope: project
  issue_id: 9952c4dc-71c7-4dce-b2c4-2ef4ff5963b6
  task_id: null
  title: Standardize file organization to prevent document sprawl
  detail: "As more tasks commit outputs, we\u2019re seeing similar documents (logs,\
    \ specs, retros, reflections) land in inconsistent folders or custom subpaths.\
    \ This reduces discoverability and increases cognitive load for incoming pods."
  suggested_fix: 'Create and publish a file structure guide for the repo. Encourage
    pods to:

    - Use standardized subfolders: `logs/retrospectives/`, `logs/reflections/`, `specs/`,
    `architecture/`, `testing/`

    - Include a `file_type` tag in metadata to auto-suggest folders

    - Provide a helper tool or hook that checks proposed file paths against existing
    structure and suggests alignment'
  tags:
  - enhancement
  - repo-structure
  - file-paths
  - standards
  - organization
  status: open
  timestamp: '2025-05-05T18:34:48.364731'
- type: enhancement
  scope: project
  issue_id: 3e3a216e-b3de-4294-a83a-efa177d7659d
  task_id: null
  title: Add pre-deployment validation to prevent import and dependency errors
  detail: During Task 2.8, multiple Railway deployment failures were caused by missing
    modules, unresolved imports, and unlisted dependencies. These could have been
    caught earlier by a pre-deploy validation step.
  suggested_fix: 'Introduce a pre-deploy validation script that checks:

    - All route modules import successfully

    - Required environment variables exist

    - Required dependencies (like httpx, pyyaml) are listed in requirements.txt

    - FastAPI app entrypoint is accessible


    This could be implemented as a GitHub Action or local dev script.'
  tags:
  - deployment
  - ci
  - validation
  - infra
  status: open
  timestamp: '2025-05-06T09:32:08.332042'
- type: bug
  scope: project
  issue_id: c50d1ffc-638c-43c1-a2b8-616b9b6fccfa
  task_id: null
  title: Prompt files were mistakenly committed to main instead of sandbox branch
  detail: During task prompt_creation-9fd099, the initial commits were made to the
    'main' branch rather than the intended 'sandbox-silent-otter'. This caused confusion
    during testing as files did not appear where expected.
  suggested_fix: Ensure prompt commits specify the correct branch from context; consider
    defaulting to the task's working branch if not explicitly set.
  tags:
  - prompt
  - commit
  - branch
  - workflow
  status: open
  timestamp: '2025-05-06T10:48:46.310233'
- type: bug
  scope: project
  issue_id: b64b4f1a-d664-4cb1-87c4-b5e395b69ead
  task_id: null
  title: OpenAPI schema fails GPT validator without `schemas` key
  detail: 'GPT builder returned error on schema import: ''In components section, schemas
    subsection is not an object.'''
  suggested_fix: 'Add an empty `schemas: {}` block under `components` in openapi.yaml.'
  tags:
  - openapi
  - schema
  - gpt-builder
  status: closed
  timestamp: '2025-05-06T15:30:34.158559'
- type: bug
  scope: project
  issue_id: 817aa08b-dea1-4f06-820f-7f02b7a71bd0
  task_id: null
  title: loadPrompt action fails with 404 in GPT
  detail: Calling GET /load_prompt from GPT returns '404 - Application not found'.
    Likely due to missing or incorrect tool deployment context in GPT or backend routing.
  suggested_fix: Verify that the FastAPI app is deployed and reachable at the production
    URL listed in openapi.yaml. Confirm the endpoint '/load_prompt' is registered
    in main.py and that token authentication is working.
  tags:
  - tooling
  - gpt
  - load_prompt
  - deployment
  status: open
  timestamp: '2025-05-06T15:30:51.436789'
- type: bug
  scope: project
  issue_id: 5d9cdbd5-b4f8-43f8-a09c-034b6354170a
  task_id: null
  title: load_prompt was broken due to incorrect file access pattern
  detail: load_prompt attempted to fetch prompts from individual JSON files per ID.
    But prompts are stored in a single file (prompts.json).
  suggested_fix: Update prompt_loader to load the full prompts.json and return prompt
    by matching ID.
  tags:
  - load_prompt
  - bug
  - prompt_loader
  status: closed
  timestamp: '2025-05-06T15:49:51.439077'
- type: bug
  scope: project
  issue_id: 6f0a588d-f869-4d8c-80f1-70ed86830f79
  task_id: null
  title: GPT Save Reflection action failed due to mismatched route name
  detail: OpenAPI spec defined a /save_reflection path, but FastAPI actually uses
    /record_reflection. This caused 404 errors when GPT tried to save journaling reflections.
  suggested_fix: Patch the OpenAPI spec to rename the path and operationId to /record_reflection
    and recordReflection.
  tags:
  - openapi
  - tooling
  - record_reflection
  - gpt
  status: closed
  timestamp: '2025-05-06T15:57:28.534709'
- type: bug
  scope: project
  issue_id: 0256617c-8177-460f-9d34-6f67601de36d
  task_id: null
  title: Notion save fails silently in save_to_notion
  detail: save_to_notion only returns False on failure and logs error with print().
    There's no capture of the Notion error response, making it difficult to debug
    when GPT fails to save reflections.
  suggested_fix: Add error logging for httpx response content. Optionally return or
    raise with error context.
  tags:
  - notion
  - reflection
  - logging
  - debug
  status: open
  timestamp: '2025-05-06T16:04:22.748542'
- type: bug
  scope: project
  issue_id: 6714dfa5-c61b-4488-b53a-3b02fe975fc5
  task_id: null
  title: 'Reflection save failed due to env var mismatch: NOTION_REFLECTION_DB vs
    NOTION_DATABASE_ID'
  detail: FastAPI expects NOTION_REFLECTION_DB for saving reflections, but Railway
    environment was set to NOTION_DATABASE_ID. This caused a 'Missing Notion config'
    error on reflection saves.
  suggested_fix: Standardize on NOTION_REFLECTION_DB and ensure it's set in all deployment
    environments.
  tags:
  - notion
  - env
  - config
  - reflection
  status: closed
  timestamp: '2025-05-06T16:27:37.003866'
- type: bug
  scope: project
  issue_id: 8126c0f2-d55e-48e4-90b1-15b02457b512
  task_id: null
  title: 'Notion save fails: property mismatch with schema'
  detail: 'Notion API returned 400: ''Session is not a property that exists. Career
    is expected to be title.''


    This indicates that either the Notion database doesn''t have a ''Session'' field,
    or its type (e.g., title vs. rich_text) doesn''t match the payload.'
  suggested_fix: Update Notion schema to include expected properties (Session, Career,
    Prompt, Reflection) with correct types. Or update code to match live schema.
  tags:
  - notion
  - schema
  - reflection
  - save
  status: open
  timestamp: '2025-05-06T16:32:43.643695'
- type: bug
  scope: project
  issue_id: d81217fb-aaa0-4d3a-a85c-2cadd2655a3f
  task_id: null
  title: Airtable write failed due to incorrect table name
  detail: The code used 'CareerReflections' as the Airtable table name, but the actual
    table name was 'Table 1'. This caused persistent 403 errors until corrected.
  suggested_fix: Update airtable_client.py to use 'Table 1' or rename the table in
    Airtable to match the code.
  tags:
  - airtable
  - reflection
  - bug
  - write
  status: closed
  timestamp: '2025-05-06T17:37:05.790002'
- type: bug
  scope: project
  issue_id: 5bbf8842-b9f7-4cb6-bd32-4323c5fece5b
  task_id: null
  title: Airtable 422 error caused by invalid field type for prompt_id
  detail: The Airtable field 'prompt_id' was set to User type instead of single-line
    text. This caused a 422 Unprocessable Entity error during API submission. Once
    changed to a text field, reflection submissions succeeded.
  suggested_fix: Document Airtable schema requirements and validate field types before
    integration.
  tags:
  - airtable
  - schema
  - reflection
  - bug
  status: closed
  timestamp: '2025-05-06T17:42:22.358962'
- type: bug
  scope: project
  issue_id: 8c9753cf-607b-4bc2-98f5-d546a3170cc6
  task_id: null
  title: PromptContent not saving due to incorrect prompt content parsing
  detail: Prompt content in Notion was empty because the prompt loader returned a
    structure with 'intro' and 'questions' nested inside 'content'. The code attempted
    to access them at the root level. Fixed by unpacking 'content' before formatting
    the string.
  suggested_fix: Update prompt formatting logic in record_reflection to read from
    prompt['content']['intro'] and ['questions']
  tags:
  - notion
  - prompts
  - reflection
  status: closed
  timestamp: '2025-05-06T18:00:46.645034'
- type: bug
  scope: project
  issue_id: 6935e8dc-8939-461a-9d9a-9098a82b0395
  task_id: null
  title: fetchSummary tool fails due to missing FastAPI route
  detail: The GPT action fetchSummary does not work because the corresponding route
    is not implemented in project/app/routes/memory.py. The endpoint should call get_summary
    from memory_manager.py but is currently undefined.
  suggested_fix: Define a new /fetch_summary route in memory.py that calls get_summary.
    Ensure get_reflection is implemented in airtable_client to support this.
  tags:
  - summary
  - fastapi
  - missing-endpoint
  status: open
  timestamp: '2025-05-06T19:14:09.957205'
